{
  "Clubs Component Template": {
    "prefix": "cmptmpl",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components';",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "  ${1:prop}: string;",
      "}",
      "",
      "const ${TM_FILENAME_BASE}Inner = styled.div`",
      "  color: ${({ theme }) => theme.colors.BLACK};",
      "`;",
      "",
      "const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = ({ ${1:props} }) => (",
      "  <${TM_FILENAME_BASE}Inner>{${1:props}}</${TM_FILENAME_BASE}Inner>",
      ");",
      "",
      "export default ${TM_FILENAME_BASE};",
    ],
    "description": "Clubs Template",
  },

  "Clubs Page Template": {
    "prefix": "pgtmpl",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:PageName} = () => (",
      "  <>${1:PageName}</>",
      ");",
      "",
      "export default ${1:PageName};",
    ],
  },

  "Clubs Mutation Template": {
    "prefix": "mutation",
    "body": [
      "import { useMutation } from '@tanstack/react-query';",
      "",
      "import {",
      " axiosClientWithAuth,",
      " defineAxiosMock,",
      " UnexpectedAPIResponseError,",
      "} from '@sparcs-clubs/web/lib/axios';",
      "",
      "const ${TM_FILENAME_BASE} = () =>",
      " useMutation<${1:Api}ResponseCreated, Error, { body: ${1:Api}RequestBody }>({",
      "   mutationFn: async ({ body }): Promise<${1:Api}ResponseCreated> => {",
      "     const { data, status } = await axiosClientWithAuth.post(",
      "       ${1:Api}.url(),",
      "       body,",
      "     );",
      "",
      "     switch (status) {",
      "       case 201:",
      "         return ${1:Api}.responseBodyMap[201].parse(data);",
      "       default:",
      "         throw new UnexpectedAPIResponseError();",
      "     }",
      "   },",
      " });",
      "",
      "export default ${TM_FILENAME_BASE};",
      "",
      "defineAxiosMock(mock => {",
      " mock.onPost(${1:Api}.url()).reply(() => [201, {}]);",
      "});",
    ],
  },
}
